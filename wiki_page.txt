{{infobox proglang
|name=Super Yellow
|author=LTHCTheMaster
|year=[[:Category:2023|2023]]
|memsys=variables
|dimensions=One-dimensional languages
|refimpl=[https://github.com/LTHCTheMaster/Super-Yellow Super Yellow]
|files=<code>.redgreen</code>
}}
'''Super Yellow''' was originally made with the goal to use only color names as instructions.

==Code's specificity==
* The code is case sensitive
* All errors are ignored
* When a line doesn't start with an instruction or contain an error, you can consider it as a comment at your own risks

==Variable Types==
{| class="wikitable"
!Name
!Description
!Default Value (code writing equivalent)
!Default Value (human readable)
!Default Value (displayed on screen using <code>black</code>)
|-
|'''integer'''
|This type is used to store positive integer numbers
|<code>zero</code>
|0
|0
|-
|'''boolean'''
|This type is used to store booleans
|<code>zero</code>
|<code>false</code>
|zero
|-
|'''string'''
|This type is used to store strings
|<code>zero</code>
|<code>""</code>
|
|-
|'''stack'''
|This type is a stack in wich you can put everything except stack
|
|<code>empty</code>, <code>[]</code> (Python equivalent but using a list)
|<code>empty</code>
|}

==Commands==
{| class="wikitable"
!Command
!Description
!Syntax
|-
|red
|Create or modify an integer, Warning: it can change the type of the variable
|red <code><name></code> <code>[value]</code>
|-
|green
|Create or modify a boolean, Warning: it can change the type of the variable
|green <code><name></code> <code>[value]</code>
|-
|blue
|Create or modify a string, Warning: it can change the type of the variable
|blue <code><name></code> <code>[value]</code>
|-
|teal
|copy the value of a variable into another variable, it can create new variables like <code>red</code>, <code>green</code>, <code>blue</code>, you can't copy stack
|teal <code><variable></code> <code><source variable></code>
|-
|black
|display a message or the value of a variable
|black <code>[<message> or #<variable name>]</code>
|-
|white
|ask the user to enter a value
|white <code><variable name></code> <code>[<message> or #<variable name>]</code>
|-
|ultraviolet
|display a new line
|ultraviolet
|-
|infrared
|do a carriage return
|infrared
|-
|bronze
|<code>bronze a b</code> do a = a - b
|bronze <code><variable name></code> <code><variable name></code>
|-
|silver
|<code>silver a b</code> do a = a + b
|silver <code><variable name></code> <code><variable name></code>
|-
|gold
|<code>gold a b</code> do a = a * b, if a is a string and b an integer: do a = a + a + ... + a (b times)
|gold <code><variable name></code> <code><variable name></code>
|-
|purple
|<code>purple a b</code> do a = a // b (Python equivalent)
|purple <code><variable name></code> <code><variable name></code>
|-
|russet
|<code>russet a b</code> do a = a % b
|russet <code><variable name></code>
|-
|orange
|<code>orange a</code> do a = !a (logical not)
|orange <code><variable name></code> <code><variable name></code>
|-
|pink
|<code>pink a b</code> do a = a & b (logical and)
|pink <code><variable name></code> <code><variable name></code>
|-
|brown
|<code>brown a b</code> do a = a | b (logical or)
|brown <code><variable name></code> <code><variable name></code>
|-
|yellow
|goto the specified line (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|yellow <code><line number></code>
|-
|magenta
|goto the specified line if a == b (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|magenta <code><variable name></code> <code><variable name></code> <code><line number></code>
|-
|cyan
|goto the specified line if a != b (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|cyan <code><variable name></code> <code><variable name></code> <code><line number></code>
|-
|gray
|goto the specified line if a > b (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|gray <code><variable name></code> <code><variable name></code> <code><line number></code>
|-
|grey
|goto the specified line if a < b (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|grey <code><variable name></code> <code><variable name></code> <code><line number></code>
|-
|azure
|create a stack or add a value above the stack, you can't put a stack in another stack
|azure <code><name></code> <code>[<source variable name>]</code>
|-
|crimson
|remove the first item on the top of the stack, you can get and store this item in a variable
|crimson <code><stack variable name></code> <code>[<variable name>]</code>
|-
|vermilion
|goto the specified line if the specified stack is empty (start counting line from 1), if you use <code>0</code> as line number, it will jump to the index written on the top of something internally called <code>index_stack</code> and remove this index from this stack, it's usefull to create some sort of functions
|vermilion <code><stack variable name></code> <code><line number></code>
|-
|lime
|push on the top of something internally called <code>index_stack</code> the index of the current line + 2
|lime
|-
|khaki
|set the value of a string to the reverse value of this string
|khaki <code>variable name</code>
|-
|indigo
|split string in two parts, it can create new variables like <code>blue</code>
|indigo <code><variable name></code> <code><variable name></code>
|}

===Some More Details===
* if you use <code>crimson</code> on an empty stack and store the value, you will get the following value in your variable: <code>\#$µ%¤\@^</code>
* <code>black one|zero</code> is equivalent to <code>ultraviolet</code>
* <code>black one|three</code> is equivalent to <code>infrared</code>

====Equivalent line speedtest====
{| class="wikitable"
!Command 1
!Time (in seconds)
!Command 2
!Time (in seconds)
!Number of lines tested in a file with only this line
!"Timestamp" of the test report in this table just after the test (using datetime (Python))
|-
|<code>black one<nowiki>|</nowiki>zero</code>
|24.926881790161133
|<code>ultraviolet</code>
|20.20875382423401
|60000
|2023-11-13 15:19:49.643338
|-
|<code>black one<nowiki>|</nowiki>three</code>
|9.278607845306396
|<code>infrared</code>
|7.548259973526001
|60000
|2023-11-13 15:26:11.542389
|}

===Value Writing===
when you see <code>value</code> in the commands list above check the details below:
* if the variable is a boolean write <code>one</code> if you want true or anything else for false
* if the variable is an integer write each digit in their word form and put a <code>|</code> between each word, for example: 854 <=> <code>eight|five|four</code>, 37 <=> <code>three|seven</code>
* if the variable is a string: all wanted characters are separated with one space character, each character is written its decimal unicode written like integer values for integer variables, for example: <code>o</code> <=> <code>one|one|one</code>, <code>bottle</code> <=> <code>three|two nine|eight one|one|one one|one|six one|one|six one|zero|eight one|zero|one</code>

when you see <code>message</code> in the commands list above, consider writing the value for a string variable

==Examples==

===[[Popular problem]]===

====[[Hello World!]]====
 black seven|two one|zero|one one|zero|eight one|zero|eight one|one|one four|four three|two one|one|nine one|one|one one|one|four one|zero|eight one|zero|zero three|three

====[[Truth Machine]]====
 red truth
 red 1 one
 red 0 zero
 white truth
 magenta truth 1 8
 magenta truth 0 10
 yellow 11
 black #truth
 yellow 8
 black #truth

====[[Cat program]]====
 blue cat
 white cat
 black #cat

====[[Looping Counter]]====
 blue out four|two
 teal * out
 black #out
 silver out *
 ultraviolet
 yellow 3

====[[Infinite Loop]]====
 yellow 1

====[[Fibonacci sequence]]====
 red a zero
 red b one
 black #a
 ultraviolet
 black #b
 ultraviolet
 silver a b
 silver b a
 yellow 3

====[[Factorial]]====
 red to_fac
 red 1 one
 red 0 zero
 white to_fac
 teal out to_fac
 teal mem to_fac
 magenta to_fac 0 13
 magenta to_fac 1 14
 bronze to_fac 1
 magenta to_fac 1 14
 gold out to_fac
 yellow 9
 silver out 1
 black #mem
 black three|three three|two six|one three|two
 black #out

====[[99 bottles of beer]]====
 red counter nine|nine
 red 2 two
 red 1 one
 red 0 zero
 blue no seven|eight one|one|one
 blue bottle three|two nine|eight one|one|one one|one|six one|one|six one|zero|eight one|zero|one
 blue s one|one|five
 blue of_beer three|two one|one|one one|zero|two three|two nine|eight one|zero|one one|zero|one one|one|four
 blue on_the_wall three|two one|one|one one|one|zero three|two one|one|six one|zero|four one|zero|one three|two one|one|nine nine|seven one|zero|eight one|zero|eight
 blue , four|four
 blue . four|six
 teal on_the_wall_2 on_the_wall
 silver on_the_wall ,
 silver on_the_wall_2 .
 teal of_beer_on_the_wall of_beer
 silver of_beer_on_the_wall on_the_wall
 teal of_beer_on_the_wall_2 of_beer
 silver of_beer_on_the_wall_2 on_the_wall_2
 blue take_one_down_pass_it_around eight|four nine|seven one|zero|seven one|zero|one three|two one|one|one one|one|zero one|zero|one three|two one|zero|zero one|one|one one|one|nine one|one|zero four|four three|two one|one|two nine|seven one|one|five one|one|five three|two one|zero|five one|one|six three|two nine|seven one|one|four one|one|one one|one|seven one|one|zero one|zero|zero four|four
 black #counter
 black #bottle
 grey counter 2 24
 black #s
 black #of_beer_on_the_wall
 ultraviolet
 black #counter
 black #bottle
 grey counter 2 30
 black #s
 black #of_beer
 black #.
 ultraviolet
 black #take_one_down_pass_it_around
 ultraviolet
 bronze counter 1
 grey counter 1 39
 black #counter
 yellow 40
 black #no
 black #bottle
 magenta counter 1 43
 black #s
 black #of_beer_on_the_wall_2
 ultraviolet
 ultraviolet
 magenta counter 0 48
 yellow 20

===Some other examples programs===

====Simple counting program====
 red out zero
 red 1 one
 black three|two three|two
 black #out
 silver out 1
 infrared
 yellow 3

====Reverse the order of a stack====
 red counter
 red 1 one
 red max one|zero
 azure normal
 azure reversed
 red tmp
 
 azure normal counter
 silver counter 1
 azure normal counter
 cyan counter max 9
 
 black #normal
 ultraviolet
 
 crimson normal tmp
 azure reversed tmp
 vermilion normal 20
 yellow 16
 black #reversed

====A test of a sort of PEEK operation for stack====
 red counter
 red 1 one
 red max one|zero
 azure stack
 red tmp
 
 azure stack counter
 silver counter 1
 azure stack counter
 cyan counter max 8
 
 yellow 18
 
 crimson stack tmp
 azure stack tmp
 yellow 0
 
 lime
 yellow 14
 black #stack
 ultraviolet
 black #tmp
 ultraviolet
 crimson stack
 vermilion stack 27
 yellow 18
 black seven|zero one|zero|five one|one|zero one|zero|five one|one|five one|zero|four three|three

====Sort a stack====

Ask the user to choose the size of the stack and input values in this stack, show the original stack and the sorted stack

 black seven|two one|one|one one|one|nine three|two one|zero|nine nine|seven one|one|zero one|two|one three|two one|one|zero one|one|seven one|zero|nine nine|eight one|zero|one one|one|four one|one|five three|two six|three one|zero
 red max
 white max
 ultraviolet
 red 1 one
 red counter
 red input
 azure orig_stack
 
 silver counter 1
 white input
 azure orig_stack input
 cyan counter max 10
 black #orig_stack
 
 azure helper_stack
 red element
 red tmp
 red tmp2
 
 vermilion orig_stack 34
 crimson orig_stack element
 vermilion helper_stack 31
 lime
 yellow 39
 magenta tmp element 31
 gray tmp element 31
 crimson helper_stack tmp2
 azure orig_stack tmp2
 yellow 23
 azure helper_stack element
 yellow 21
 
 crimson helper_stack tmp
 azure orig_stack tmp
 vermilion helper_stack 43
 yellow 34
 
 crimson helper_stack tmp
 azure helper_stack tmp
 yellow 0
 
 ultraviolet
 black #orig_stack

[[Category:Languages]]
[[Category:2023]]
